import random

from google.adk import Agent
from google.adk.tools.tool_context import ToolContext
from google.adk.models.lite_llm import LiteLlm
from .mcp_tools import get_mcp_tools


def roll_die(sides: int, tool_context: ToolContext) -> int:
    """Roll a die and return the rolled result.
    Args:
      sides: The integer number of sides the die has.
    Returns:
      An integer of the result of rolling the die.
    """
    result = random.randint(1, sides)
    if "rolls" not in tool_context.state:
        tool_context.state["rolls"] = []

    tool_context.state["rolls"] = tool_context.state["rolls"] + [result]
    return result


async def check_prime(nums: list[int]) -> str:
    """Check if a given list of numbers are prime.
    Args:
      nums: The list of numbers to check.
    Returns:
      A str indicating which number is prime.
    """
    primes = set()
    for number in nums:
        number = int(number)
        if number <= 1:
            continue
        is_prime = True
        for i in range(2, int(number**0.5) + 1):
            if number % i == 0:
                is_prime = False
                break
        if is_prime:
            primes.add(number)
    return "No prime numbers found." if not primes else f"{', '.join(str(num) for num in primes)} are prime numbers."


# Create model based on provider and model name
{{if eq .ModelProvider "gemini"}}
def create_model():
    """Create a Gemini model instance."""
    return "{{.ModelName}}"
{{else if eq .ModelProvider "openai"}}
def create_model():
    """Create an OpenAI model instance using LiteLLM."""
    return LiteLlm(model="openai/{{.ModelName}}")
{{else if eq .ModelProvider "anthropic"}}
def create_model():
    """Create an Anthropic model instance using LiteLLM."""
    return LiteLlm(model="anthropic/{{.ModelName}}")
{{else if eq .ModelProvider "azureopenai"}}
def create_model():
    """Create an Azure OpenAI model instance using LiteLLM."""
    return LiteLlm(model="azure/{{.ModelName}}")
{{else}}
def create_model():
    """Create a custom model instance."""
    return "{{.ModelName}}"
{{end}}


root_agent = Agent(
    model=create_model(),
    name="{{.Name}}_agent",
    description=("{{.Name}} agent."),
    instruction="""
{{.Instruction}}
    """,
    tools=[
        roll_die,
        check_prime,
    ] + get_mcp_tools(),
)