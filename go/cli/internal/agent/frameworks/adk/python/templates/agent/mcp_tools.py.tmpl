# AUTOGENERATED FILE: DO NOT EDIT
# This file is automatically generated by the kagent-adk CLI tool.
# Any changes to this file will be overwritten.

import os
import re
from typing import List, Optional, Dict
from google.adk.tools.base_toolset import ToolPredicate
from google.adk.tools.mcp_tool.mcp_toolset import MCPToolset, StreamableHTTPConnectionParams


# MCP Server configuration generated from kagent.yaml
_MCP_SERVERS = [
{{- range .McpServers }}
    {
        "name": "{{ .Name }}",
        "type": "{{ .Type }}",
        {{- if eq .Type "remote" }}
        "url": "{{ .URL }}",
        {{- if .Headers }}
        "headers": {
            {{- range $key, $value := .Headers }}
            "{{ $key }}": "{{ $value }}",
            {{- end }}
        },
        {{- end }}
        {{- end }}
    },
{{- end }}
]


def _resolve_env_vars(value: str) -> str:
    """Resolve environment variables in a string value.
    
    Supports ${VAR_NAME} syntax for environment variable substitution.
    If the environment variable is not set, the original pattern is kept.
    
    Args:
        value: String that may contain ${VAR_NAME} patterns
        
    Returns:
        String with environment variables resolved
    """
    def replace_var(match):
        var_name = match.group(1)
        return os.environ.get(var_name, match.group(0))
    
    return re.sub(r'\$\{([^}]+)\}', replace_var, value)


def get_mcp_tools(
    server_names: Optional[List[str]] = None,
    server_predicates: Optional[Dict[str, ToolPredicate]] = None,
    global_predicate: Optional[ToolPredicate] = None
) -> List[MCPToolset]:
    """Get MCP tools from configured servers with optional filtering.
    
    Args:
        server_names: Optional list of server names to include. If None, includes all servers.
        server_predicates: Optional dict mapping server names to ToolPredicates for per-server filtering.
        global_predicate: Optional ToolPredicate to apply to all servers (overridden by server_predicates).
    
    Returns:
        List of MCPToolset instances, one for each configured/filtered server.
    """
    servers = _MCP_SERVERS
    
    # Filter servers by name if specified
    if server_names is not None:
        servers = [s for s in servers if s.get("name") in server_names]
    
    toolsets = []
    for server in servers:
        server_name = server["name"]
        
        # Determine the URL based on server type
        # For command type, use the server name as hostname (each server has its own docker-compose service)
        # For remote type, use the configured URL
        url = f"http://{server_name}:3000/mcp" if server["type"] == "command" else server["url"]
        
        # Process headers with environment variable resolution
        headers = {}
        if "headers" in server and server["headers"]:
            for key, value in server["headers"].items():
                headers[key] = _resolve_env_vars(value)
        
        predicate = None
        if server_predicates and server_name in server_predicates:
            predicate = server_predicates[server_name]
        elif global_predicate is not None:
            predicate = global_predicate
        
        # Create connection params with headers if present
        if headers:
            connection_params = StreamableHTTPConnectionParams(url=url, headers=headers)
        else:
            connection_params = StreamableHTTPConnectionParams(url=url)
            
        if predicate is not None:
            toolsets.append(MCPToolset(connection_params=connection_params, predicate=predicate))
        else:
            toolsets.append(MCPToolset(connection_params=connection_params))
    
    return toolsets
